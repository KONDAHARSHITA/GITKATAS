Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas (3-way-merge)
$ cd advanced-rebase-interactive

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive (3-way-merge)
$ source setup.sh
Initialized empty Git repository in C:/Users/Harshita/Zemoso-internship/git-katas/advanced-rebase-interactive/remote/
Cloning into 'exercise'...
warning: You appear to have cloned an empty repository.
done.
[master (root-commit) 02acf99] Initial commit
Enumerating objects: 2, done.
Counting objects: 100% (2/2), done.
Writing objects: 100% (2/2), 173 bytes | 173.00 KiB/s, done.
Total 2 (delta 0), reused 0 (delta 0), pack-reused 0
To C:/Users/Harshita/Zemoso-internship/git-katas/advanced-rebase-interactive/./remote
 * [new branch]      master -> master
Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
To C:/Users/Harshita/Zemoso-internship/git-katas/advanced-rebase-interactive/./remote
 * [new tag]         v0.0 -> v0.0
warning: in the working copy of 'hello.code', LF will be replaced by CRLF the next time Git touches it
[master fe7f89f] Helo Volrd feature
 1 file changed, 1 insertion(+)
 create mode 100644 hello.code
warning: in the working copy of 'hello.code', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'other.code', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'hello.code', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'other.code', LF will be replaced by CRLF the next time Git touches it
[master 1188702] Finished HW feature
 2 files changed, 2 insertions(+), 1 deletion(-)
 create mode 100644 other.code
warning: in the working copy of 'hello.code', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'other.code', LF will be replaced by CRLF the next time Git touches it
[master 7989c16] Really made the thingy done
 1 file changed, 1 insertion(+), 1 deletion(-)
warning: in the working copy of 'hello.code', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'other.code', LF will be replaced by CRLF the next time Git touches it
[master cb4b8e0] debugging
 1 file changed, 1 insertion(+)
warning: in the working copy of 'private.secret', LF will be replaced by CRLF the next time Git touches it
[master 06b34df] important secret
 1 file changed, 1 insertion(+)
 create mode 100644 private.secret
warning: in the working copy of 'README.md', LF will be replaced by CRLF the next time Git touches it
[master 1aba48c] Add doc - step 1
 1 file changed, 1 insertion(+)
 create mode 100644 README.md
warning: in the working copy of 'README.md', LF will be replaced by CRLF the next time Git touches it
[master e7657f8] Add doc - step 2
 1 file changed, 1 insertion(+), 1 deletion(-)
warning: in the working copy of 'README.md', LF will be replaced by CRLF the next time Git touches it
[master 78745d3] Add doc - step 3
 1 file changed, 2 insertions(+)
warning: in the working copy of 'hello.test', LF will be replaced by CRLF the next time Git touches it
[master ddf2f11] Test for feature hello world
 1 file changed, 1 insertion(+)
 create mode 100644 hello.test
warning: in the working copy of 'README.md', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'hello.test', LF will be replaced by CRLF the next time Git touches it
[master 159d621] I forgot a semicolon
 1 file changed, 1 insertion(+), 1 deletion(-)

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ git log
commit 159d621abc78732780a38c95e34863802721715c (HEAD -> master)
Author: Harshita Konda <harshita.konda@zemosolabs.com>
Date:   Thu Nov 10 09:31:06 2022 +0530

    I forgot a semicolon

commit ddf2f1145aa42d47cbde85e80af6037a516c6013
Author: Harshita Konda <harshita.konda@zemosolabs.com>
Date:   Thu Nov 10 09:31:05 2022 +0530

    Test for feature hello world

commit 78745d3d3af2f19ef2239249d1efece6b8a23bd8
Author: Harshita Konda <harshita.konda@zemosolabs.com>
Date:   Thu Nov 10 09:31:05 2022 +0530

    Add doc - step 3

commit e7657f8977d8703b0f2a871f76a3d3e2ab0322b7
Author: Harshita Konda <harshita.konda@zemosolabs.com>
Date:   Thu Nov 10 09:31:05 2022 +0530

    Add doc - step 2

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ git log --oneline
159d621 (HEAD -> master) I forgot a semicolon
ddf2f11 Test for feature hello world
78745d3 Add doc - step 3
e7657f8 Add doc - step 2
1aba48c Add doc - step 1
06b34df important secret
cb4b8e0 debugging
7989c16 Really made the thingy done
1188702 Finished HW feature
fe7f89f Helo Volrd feature
02acf99 (tag: v0.0, origin/master) Initial commit

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ git rebase -i v0.0
[detached HEAD 25d8b0f] Hello world feature
 Date: Thu Nov 10 09:31:03 2022 +0530
 1 file changed, 1 insertion(+)
 create mode 100644 hello.code
Successfully rebased and updated refs/heads/master.

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ git rebase --i
error: ambiguous option: i (could be --ignore-whitespace or --interactive)
usage: git rebase [-i] [options] [--exec <cmd>] [--onto <newbase> | --keep-base] [<upstream> [<branch>]]
   or: git rebase [-i] [options] [--exec <cmd>] [--onto <newbase>] --root [<branch>]
   or: git rebase --continue | --abort | --skip | --edit-todo

    --onto <revision>     rebase onto given branch instead of upstream
    --keep-base           use the merge-base of upstream and branch as the current base
    --no-verify           allow pre-rebase hook to run
    -q, --quiet           be quiet. implies --no-stat
    -v, --verbose         display a diffstat of what changed upstream
    -n, --no-stat         do not show diffstat of what changed upstream
    --signoff             add a Signed-off-by trailer to each commit
    --committer-date-is-author-date
                          make committer date match author date
    --reset-author-date   ignore author date and use current date
    -C <n>                passed to 'git apply'
    --ignore-whitespace   ignore changes in whitespace
    --whitespace <action>
                          passed to 'git apply'
    -f, --force-rebase    cherry-pick all commits, even if unchanged
    --no-ff               cherry-pick all commits, even if unchanged
    --continue            continue
    --skip                skip current patch and continue
    --abort               abort and check out the original branch
    --quit                abort but keep HEAD where it is
    --edit-todo           edit the todo list during an interactive rebase
    --show-current-patch  show the patch file being applied or merged
    --apply               use apply strategies to rebase
    -m, --merge           use merging strategies to rebase
    -i, --interactive     let the user edit the list of commits to rebase
    --rerere-autoupdate   update the index with reused conflict resolution if possible
    --empty <{drop,keep,ask}>
                          how to handle commits that become empty
    --autosquash          move commits that begin with squash!/fixup! under -i
    -S, --gpg-sign[=<key-id>]
                          GPG-sign commits
    --autostash           automatically stash/stash pop before and after
    -x, --exec <exec>     add exec lines after each commit of the editable list
    -r, --rebase-merges[=<mode>]
                          try to rebase merges instead of skipping them
    --fork-point          use 'merge-base --fork-point' to refine upstream
    -s, --strategy <strategy>
                          use the given merge strategy
    -X, --strategy-option <option>
                          pass the argument through to the merge strategy
    --root                rebase all reachable commits up to the root(s)
    --reschedule-failed-exec
                          automatically re-schedule any `exec` that fails
    --reapply-cherry-picks
                          apply all changes, even those already present upstream


Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ git rebase --i v0.0
error: ambiguous option: i (could be --ignore-whitespace or --interactive)
usage: git rebase [-i] [options] [--exec <cmd>] [--onto <newbase> | --keep-base] [<upstream> [<branch>]]
   or: git rebase [-i] [options] [--exec <cmd>] [--onto <newbase>] --root [<branch>]
   or: git rebase --continue | --abort | --skip | --edit-todo

    --onto <revision>     rebase onto given branch instead of upstream
    --keep-base           use the merge-base of upstream and branch as the current base
    --no-verify           allow pre-rebase hook to run
    -q, --quiet           be quiet. implies --no-stat
    -v, --verbose         display a diffstat of what changed upstream
    -n, --no-stat         do not show diffstat of what changed upstream
    --signoff             add a Signed-off-by trailer to each commit
    --committer-date-is-author-date
                          make committer date match author date
    --reset-author-date   ignore author date and use current date
    -C <n>                passed to 'git apply'
    --ignore-whitespace   ignore changes in whitespace
    --whitespace <action>
                          passed to 'git apply'
    -f, --force-rebase    cherry-pick all commits, even if unchanged
    --no-ff               cherry-pick all commits, even if unchanged
    --continue            continue
    --skip                skip current patch and continue
    --abort               abort and check out the original branch
    --quit                abort but keep HEAD where it is
    --edit-todo           edit the todo list during an interactive rebase
    --show-current-patch  show the patch file being applied or merged
    --apply               use apply strategies to rebase
    -m, --merge           use merging strategies to rebase
    -i, --interactive     let the user edit the list of commits to rebase
    --rerere-autoupdate   update the index with reused conflict resolution if possible
    --empty <{drop,keep,ask}>
                          how to handle commits that become empty
    --autosquash          move commits that begin with squash!/fixup! under -i
    -S, --gpg-sign[=<key-id>]
                          GPG-sign commits
    --autostash           automatically stash/stash pop before and after
    -x, --exec <exec>     add exec lines after each commit of the editable list
    -r, --rebase-merges[=<mode>]
                          try to rebase merges instead of skipping them
    --fork-point          use 'merge-base --fork-point' to refine upstream
    -s, --strategy <strategy>
                          use the given merge strategy
    -X, --strategy-option <option>
                          pass the argument through to the merge strategy
    --root                rebase all reachable commits up to the root(s)
    --reschedule-failed-exec
                          automatically re-schedule any `exec` that fails
    --reapply-cherry-picks
                          apply all changes, even those already present upstream


Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ git rebase -i v0.0
[detached HEAD 91dff53] Documentation
 Date: Thu Nov 10 09:31:04 2022 +0530
 2 files changed, 4 insertions(+)
 create mode 100644 README.md
 create mode 100644 private.secret
Successfully rebased and updated refs/heads/master.

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ git rebase -i v0.0
[detached HEAD 3fd371a] Hello world feature
 Date: Thu Nov 10 09:31:03 2022 +0530
 1 file changed, 1 insertion(+)
 create mode 100644 hello.code
Successfully rebased and updated refs/heads/master.

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ vim file.txt

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ ls
README.md  file.txt  hello.code  hello.test  other.code  private.secret

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ vim hello.code

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ git add hello.code

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ git commit -m "changed the code"
[master 4a9ba9e] changed the code
 1 file changed, 1 insertion(+), 1 deletion(-)

Harshita@DESKTOP-3OFEE2E MINGW64 ~/Zemoso-internship/git-katas/advanced-rebase-interactive/exercise (master)
$ cat hello.code
Hello World!;
println DEBUG
